@mixin flex(
  $flex-flow: unset,
  $justify-c: unset,
  $align-i: unset,
  $gap: unset,
  $flex: unset
) {
  @include assign-properties-if-not-unset(
    $properties: (
      flex: $flex,
      display: flex,
      flex-flow: $flex-flow,
      justify-content: $justify-c,
      align-items: $align-i,
      gap: $gap,
    )
  );
}

@mixin box-shadow(
  $inset: false,
  $offsets: (
    x: 0,
    y: 0,
  ),
  $radii: (
    blur: 0,
    spread: 0,
  ),
  $color: (
    color-channel: #000000,
    alpha-channel: 0.15,
  )
) {
  $box-shadow-string: "";
  @if $inset {
    $box-shadow-string: "inset ";
  }
  $offsets-string: "#{map-get($offsets, x)} #{map-get($offsets, y)}";
  $radii-string: "#{map-get($radii, blur)} #{map-get($radii, spread)}";
  $color-string: rgba(
    map-get($color, color-channel),
    map-get($color, alpha-channel)
  );

  $box-shadow-string: "#{$box-shadow-string}#{$offsets-string} #{$radii-string} #{$color-string}";

  box-shadow: #{unquote($box-shadow-string)};
}

@mixin position(
  $position: absolute,
  $top: unset,
  $right: unset,
  $bottom: unset,
  $left: unset
) {

  @include assign-properties-if-not-unset(
    $properties: (
      position: $position,
      top: $top,
      right: $right,
      bottom: $bottom,
      left: $left,
    )
  );
}

@mixin sizes(
  $height: unset,
  $width: unset,
  $min-height: unset,
  $max-height: unset,
  $min-width: unset,
  $max-width: unset
) {
  @include assign-properties-if-not-unset(
    $properties: (
      height: $height,
      width: $width,
      min-height: $min-height,
      max-height: $max-height,
      min-width: $min-width,
      max-width: $max-width,
    )
  );
}

@mixin assign-properties-if-not-unset($properties: ()) {
  @each $property, $value in $properties {
    @if $value != unset {
      #{$property}: $value;
    }
  }
}
